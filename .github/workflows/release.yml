name: Release (deb, exe, flatpak, tar.gz, AUR)

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
      - "v*.*"
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_ID: io.streambooru.StreamBooru
  APP_NAME: StreamBooru

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      owner: ${{ steps.meta.outputs.owner }}
      repo: ${{ steps.meta.outputs.repo }}
    steps:
      - uses: actions/checkout@v4
      - id: meta
        run: |
          REF="${GITHUB_REF##*/}"
          echo "version=${REF#v}" >> "$GITHUB_OUTPUT"
          echo "owner=${GITHUB_REPOSITORY%%/*}" >> "$GITHUB_OUTPUT"
          echo "repo=${GITHUB_REPOSITORY##*/}" >> "$GITHUB_OUTPUT"

  linux-deb-and-tar:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Ensure electron-builder installed
        run: npm i -D electron-builder@^24
      - name: Build .deb and linux tar.gz (no publish)
        run: npx electron-builder --publish=never --config electron-builder.yml --linux deb tar.gz
      - name: Create README_INSTALL for tarballs
        run: cp docs/INSTALL.md dist/INSTALL.md || true
      - name: Collect artifacts
        run: |
          mkdir -p release-linux
          shopt -s nullglob
          cp dist/*.deb release-linux/ || true
          cp dist/*.tar.gz release-linux/ || true
          cp dist/INSTALL.md release-linux/ || true
          ls -la release-linux
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: release-linux

  windows-exe:
    if: startsWith(github.ref, 'refs/tags/')
    continue-on-error: true
    needs: prep
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci
      - name: Ensure electron-builder installed
        run: npm i -D electron-builder@^24
      - name: Build NSIS .exe installer (no publish)
        run: npx electron-builder --publish=never --config electron-builder.yml --win nsis
      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p release-win
          shopt -s nullglob
          cp dist/*.exe release-win/ || true
          cp docs/INSTALL.md release-win/INSTALL.md || true
          ls -la release-win
      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: release-win

  flatpak:
    if: startsWith(github.ref, 'refs/tags/')
    continue-on-error: true
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Flatpak tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder elfutils

      - name: Add Flathub remote (user scope)
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak remotes -d

      - name: Preinstall Flatpak SDKs (optional)
        run: |
          flatpak --user install -y --noninteractive flathub \
            org.freedesktop.Platform//23.08 \
            org.freedesktop.Sdk//23.08

      - name: Build Flatpak
        run: |
          mkdir -p flatpak-build flatpak-repo
          flatpak-builder --force-clean --user --install-deps-from=flathub flatpak-build flatpak/${{ env.APP_ID }}.yaml --repo=flatpak-repo
          flatpak build-bundle flatpak-repo ${{ env.APP_NAME }}.flatpak ${{ env.APP_ID }} stable

      - name: Collect artifacts
        run: |
          mkdir -p release-flatpak
          cp ${{ env.APP_NAME }}.flatpak release-flatpak/
          cp docs/INSTALL.md release-flatpak/INSTALL.md || true
          ls -la release-flatpak

      - uses: actions/upload-artifact@v4
        with:
          name: flatpak
          path: release-flatpak

  android:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Add & Sync Capacitor Android
        run: |
          npx cap sync
          if [ ! -d android ]; then
            npx cap add android
          fi
          npx cap sync android

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Make Gradle wrapper executable
        working-directory: android
        run: chmod +x gradlew

      - name: Build Debug APK
        working-directory: android
        run: ./gradlew assembleDebug

      - name: Upload Debug APK (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: android-debug
          path: android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: warn

      - name: Decode Keystore (PKCS#12)
        run: |
          if [ -n "${ANDROID_KEYSTORE_BASE64}" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/keystore.p12
            echo "Keystore decoded to android/keystore.p12"
          else
            echo "ANDROID_KEYSTORE_BASE64 not set; skipping keystore decode"
          fi
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Build Signed Release (AAB + APK)
        working-directory: android
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KEYSTORE_PATH: keystore.p12
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          if [ -n "${ANDROID_KEYSTORE_BASE64}" ]; then
            chmod +x gradlew
            ./gradlew clean
            ./gradlew \
              bundleRelease \
              assembleRelease \
              -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/android/$KEYSTORE_PATH \
              -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
              -Pandroid.injected.signing.store.type=PKCS12 \
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          else
            echo "No keystore secret; skipping signed release build"
          fi

      - name: Collect Android artifacts
        run: |
          mkdir -p release-android
          shopt -s nullglob
          cp android/app/build/outputs/bundle/release/*.aab release-android/ || true
          cp android/app/build/outputs/apk/release/*.apk release-android/ || true
          cp android/app/build/outputs/apk/debug/*.apk  release-android/ || true
          ls -la release-android

      - uses: actions/upload-artifact@v4
        with:
          name: android
          path: release-android

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [prep, linux-deb-and-tar, windows-exe, flatpak, android]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (to read CHANGELOG.md)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts (some may be missing if a job failed)
        run: find ./artifacts -type f -maxdepth 3 -print || true

      - name: Setup Node (for extractor)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Extract release notes from CHANGELOG.md
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          node ./scripts/extract-changelog.mjs "$TAG" "./CHANGELOG.md" "./CHANGELOG_RELEASE.md" || true
          if [ ! -s "./CHANGELOG_RELEASE.md" ] && [ -f "./docs/CHANGELOG.md" ]; then
            node ./scripts/extract-changelog.mjs "$TAG" "./docs/CHANGELOG.md" "./CHANGELOG_RELEASE.md" || true
          fi

          if [ -s "./CHANGELOG_RELEASE.md" ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "notes_path=CHANGELOG_RELEASE.md" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload extracted notes (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: changelog-extract-${{ github.ref_name }}
          path: CHANGELOG_RELEASE.md
          if-no-files-found: warn
          retention-days: 7

      - name: Create/Update GitHub Release (CHANGELOG body)
        if: steps.extract.outputs.found == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: ${{ steps.extract.outputs.notes_path }}
          generate_release_notes: false
          make_latest: true
          overwrite_files: true
          fail_on_unmatched_files: false
          files: |
            artifacts/linux/**
            artifacts/windows/**
            artifacts/flatpak/**
            artifacts/android/**

      - name: Create/Update GitHub Release (auto-generated notes)
        if: steps.extract.outputs.found != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          make_latest: true
          overwrite_files: true
          fail_on_unmatched_files: false
          files: |
            artifacts/linux/**
            artifacts/windows/**
            artifacts/flatpak/**
            artifacts/android/**

  aur:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [prep, create-release]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prep.outputs.version }}
      OWNER:   ${{ needs.prep.outputs.owner }}
      REPO:    ${{ needs.prep.outputs.repo }}
      PKGNAME: ${{ secrets.AUR_PACKAGE }}
      AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
      AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
      AUR_PACKAGE: ${{ secrets.AUR_PACKAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Check AUR secrets
        id: check
        shell: bash
        run: |
          publish=true
          if [ -z "${AUR_SSH_PRIVATE_KEY}" ] || [ -z "${AUR_USERNAME}" ] || [ -z "${AUR_PACKAGE}" ]; then
            publish=false
          fi
          echo "publish=${publish}" >> "$GITHUB_OUTPUT"
          if [ "${publish}" != "true" ]; then
            echo "AUR secrets missing; skipping AUR publish." >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Generate PKGBUILD from template
        if: steps.check.outputs.publish == 'true'
        run: |
          mkdir -p aur-out
          sed -e "s|@@PKGNAME@@|${PKGNAME}|g" \
              -e "s|@@VERSION@@|${VERSION}|g" \
              -e "s|@@OWNER@@|${OWNER}|g" \
              -e "s|@@REPO@@|${REPO}|g" \
              aur/PKGBUILD.in > aur-out/PKGBUILD
      - name: Compute sha256sums for release tarball (-bin)
        if: steps.check.outputs.publish == 'true'
        run: |
          ASSET_URL="https://github.com/${OWNER}/${REPO}/releases/download/v${VERSION}/streambooru-${VERSION}.tar.gz"
          curl -L "$ASSET_URL" -o "aur-out/streambooru-${VERSION}.tar.gz"
          SHA=$(sha256sum "aur-out/streambooru-${VERSION}.tar.gz" | awk '{print $1}')
          sed -i "s|@@SHA256@@|${SHA}|g" aur-out/PKGBUILD
      - name: Create .SRCINFO
        if: steps.check.outputs.publish == 'true'
        run: |
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -e HOME=/tmp \
            -v "$PWD/aur-out":/pkg \
            -w /pkg \
            archlinux:base-devel \
            bash -lc 'makepkg --printsrcinfo > .SRCINFO'
          ls -la aur-out
      - name: Publish to AUR
        if: steps.check.outputs.publish == 'true'
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.1
        with:
          pkgname: ${{ secrets.AUR_PACKAGE }}
          pkgbuild: aur-out/PKGBUILD
          assets: |
            aur-out/.SRCINFO
            aur/streambooru.sh
            aur/streambooru.desktop
          commit_username: "github-actions[bot]"
          commit_email: "41898282+github-actions[bot]@users.noreply.github.com"
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          ssh_keyscan_types: rsa,ecdsa,ed25519
